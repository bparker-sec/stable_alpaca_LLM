{"instruction": "How do I find Users that have had MFA fatigue attacks against them in Azure AD or have seen multiple authentication failures followed by a success.", "context": "XQL", "response": "dataset = msft_azure_ad_raw | \nalter auth_reason = json_extract_scalar(status , \"$.failureReason\") , \n     errorCode =  json_extract_scalar(status , \"$.errorCode\"),\n     success = if(json_extract_scalar(status , \"$.errorCode\")=\"0\", \"True\", null),\n     authentiction_failed_during_mfa = if(json_extract_scalar(status , \"$.errorCode\")=\"500121\", \"True\", null)|\n    \nfields auth_reason, errorCode , success , userDisplayName , userPrincipalName as username,authentiction_failed_during_mfa |\ncomp count(success) as authentiction_success_count, count(authentiction_failed_during_mfa) as mfa_failuers by username|\nfilter authentiction_success_count >=1 and mfa_failuers >= 3", "category": "open_qa"}
{"instruction": "How do I display operations performed by non human cli access.", "context": "XQL", "response": "\/\/ Non human CLI usage \ndataset = cloud_audit_logs \n| filter cloud_provider = AWS \/\/ filter cloud provider \n| filter identity_type != User \/\/ exclude users as they tend to work a lot with CLI \n| filter user_agent ~= \".*cli.*\"\n| filter identity_type != \"ANONYMOUS\"  \/\/ filter scanner (usually denied external access )\n| fields _time,  caller_ip_geolocation, user_agent, identity_name, identity_type, operation_name_orig, operation_status \n| comp values(operation_name_orig) as operations by  caller_ip_geolocation, identity_name, identity_type, operation_status\n| alter ops = arraystring(operations, \",\") \n|comp values(caller_ip_geolocation) as locations by identity_name, identity_type, operation_status, ops\n| fields identity_name, identity_type, operation_status, ops, locations", "category": "open_qa"}
{"instruction": "Display rare processs that are started by powershell.", "context": "XQL", "response": "dataset = xdr_data \/\/ Using the XDR dataset\n| filter event_type = ENUM.PROCESS  and event_sub_type = ENUM.PROCESS_START and lowercase(actor_process_image_name) = \"powershell.exe\" \/\/ Filtering for parent process is powershell.exe\n| fields action_process_image_name as process_name, action_process_image_command_line as process_cmd, event_id \/\/ Getting the relevant fields\n| comp count(event_id ) as counter by process_name , process_cmd  \/\/ Counting how many times each process was started by powershell with a specific command line\n| filter counter <= 5 \/\/ Filtering for 5 or less cases of an execution\n| sort desc counter \/\/ Sorting in desc order, "category": "open_qa"}
{"instruction": "Children of Office Processes that made more than 5 connections. This query joins network connections with file activity to display processes that were spawned by an office process (not necessarily a direct child, could be anywhere in the chain of execution under office) that made more than 5 connections", "context": "XQL", "response": "dataset = xdr_data \/\/ Using the xdr dataset\n | filter event_type = ENUM.NETWORK and lowercase(causality_actor_process_image_name) in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\") and causality_actor_process_image_name != actor_process_image_name \/\/ Filtering for cases where the CGO is an office process and is not doing the network connections on its own\n | fields agent_hostname as host_name, causality_actor_process_image_path as CGO_Path, causality_actor_process_command_line as CGO_CMD, causality_actor_primary_username as Username, actor_process_image_path as child_path, actor_process_command_line as child_cmd, actor_process_os_pid as child_pid, actor_process_image_sha256 as child_sha256, actor_process_execution_time as start_date, event_id \/\/ Selecting notable fields\n | comp count(event_id) as Counter by host_name, CGO_Path, CGO_CMD, Username, child_path, child_cmd, child_pid, child_sha256, start_date \/\/ Counting how many connections were done by the child process\n | filter Counter >= 5 \/\/ Filtering for more than 5 connections\n | sort desc Counter \/\/ Sorting in descending order\n | fields start_date, host_name, CGO_Path, CGO_CMD, Username, child_path, child_cmd, child_pid, child_sha256, Counter \/\/ Showing fields of interest "category": "open_qa"}
{"instruction": "IIS running discovery commands /n Displays possible webshell abuse by attackers", "context": "XQL", "response": "dataset = xdr_data \/\/ look at xdr data\n|filter lowercase(causality_actor_process_image_name) = \"w3wp.exe\"  \/\/ filter IIS\n|filter lowercase(action_process_image_name) in (\"net.exe\", \"quser.exe\", \"certutil.exe\", \"arp.exe\", \"hostname.exe\", \"whoami.exe\", \"netstat.exe\", \"ping.exe\", \"ipconfig.exe\", \"wmic.exe\", \"del.exe\", \"cmd.exe\", \"powershell.exe\") \/\/ look for discovery commands\n|fields agent_hostname, agent_version, actor_effective_username , causality_actor_process_image_name,  causality_actor_process_command_line  , actor_process_image_name, actor_process_command_line, action_process_image_name, action_process_image_command_line "category": "open_qa"}
{"instruction": "Display users who created more than 100 files on a removable device such as a USB storage device, alongside the driver letter, filesystem and serial", "context": "XQL", "response": "dataset = xdr_data \/\/ Using the xdr dataset\n | filter event_type = ENUM.FILE and event_sub_type = ENUM.FILE_CREATE_NEW \/\/ Looking for file creation events\n | alter Drive_Type = json_extract(to_json_string(action_file_device_info),\"$.storage_device_drive_type\"), Filesystem = json_extract_scalar(to_json_string(action_file_device_info),\"$.storage_device_filesystem\"), Drive_Letter = json_extract_scalar(to_json_string(action_file_device_info),\"$.storage_device_mount_point\"), Device_Serial_Number = json_extract_scalar(to_json_string(action_file_device_info),\"$.storage_device_serial_number\") \/\/ Getting details about the device a file was created on\n | filter drive_type = \"2\" \/\/ Filtering by drive type 2 which is 'Removable Media'\n | fields action_file_path as File_Path, actor_effective_username as Username, Filesystem, Drive_Letter, Device_Serial_Number \/\/ Selecting the relevant fields\n | comp count_distinct(File_Path) as Count_Of_Unique_Files by Username, Filesystem, Drive_Letter, Device_Serial_Number \/\/ Counting the amount of distinct files by path created on the removable device\n | filter Count_Of_Unique_Files > 100 \/\/ Filtering for more than 100 files\n | sort desc Count_Of_Unique_Files \/\/ Sorting in descending order by number of distinct files"category": "open_qa"}
{"instruction": "Display the top 10 users who created files on a removable device such as a USB storage device", "context": "XQL", "response": "dataset = xdr_data \/\/ Using the xdr dataset\n | filter event_type = ENUM.FILE and event_sub_type = ENUM.FILE_CREATE_NEW \/\/ Looking for file creation events\n | alter Drive_Type = json_extract(to_json_string(action_file_device_info),\"$.storage_device_drive_type\") \/\/ Getting details about the device a file was created on\n | filter drive_type = \"2\" \/\/ Filtering by drive type 2 which is 'Removable Media'\n | fields action_file_path as File_Path, actor_effective_username as Username \/\/ Selecting the relevant fields\n | comp count_distinct(File_Path) as Count_Of_Unique_Files by Username \/\/ Counting the amount of distinct files by path created on the removable device\n | sort desc Count_Of_Unique_Files \/\/ Sorting in descending order by number of distinct files\n | limit 10 \/\/ Show only the top 10 users\n | view graph type = pie show_callouts = true xaxis = username yaxis = Count_Of_Unique_Files \/\/ Showing a pie chart of the results. "category": "open_qa"}
{"instruction": "Display connections to domains with very long names (over 100 chars). This could be an indication of DNS tunneling", "context": "XQL", "response": "\/\/ NOTE: this query requires Palo Alto Networks NGFW data with Enhanced Application Logs enabled\n dataset = xdr_data \/\/ Using the xdr dataset\n | filter event_type = ENUM.STORY and len(dns_query_name) > 100 \/\/ Filter by DNS queries where the domain name is over 100 characters in length\n | fields action_local_ip, dns_query_name \/\/ Get the local IP and the domain name\n | comp count_distinct(dns_query_name) as unique_long_dns by action_local_ip \/\/ Count the distinct FQDNs queried by the local IP\n | sort desc unique_long_dns \/\/ Sort in descending order "category": "open_qa"}
{"instruction": "Display the top 10 users by the number of times they failed to log in.", "context": "XQL", "response": "dataset = xdr_data \/\/ Using the xdr dataset\n | filter event_type = ENUM.EVENT_LOG and action_evtlog_event_id = 4625 \/\/ Filtering by windows event log and id 4625\n | fields action_evtlog_message, event_id \/\/ Selecting the full event log message and the event id\n | alter User_Name = lowercase(arrayindex(regextract(action_evtlog_message, \"Account For Which Logon Failed:\\r\\n.*\\r\\n.*Account Name:.*?(\\w.*)\\r\\n\"),0)) \/\/ Using regextract to get just the user name into an array, then using arrayindex to take the first item in the array. Also makign sure the resuls are in lower case\n | filter User_Name not contains \"*$\" \/\/ removing computer accounts that end with $. Note that the * is needed too.\n | comp count(event_id) as Counter by User_Name \/\/ Counting how many times each user failed to login\n | sort desc Counter \/\/ Sorting by the counter\n | limit 10 \/\/ Limiting the results to only the top 10\n | view graph type = column subtype = grouped,horizontal show_callouts = true xaxis = user_name yaxis = Counter \/\/ Showing results in a bar chart "category": "open_qa"}
{"instruction": "Display services that have been installed 5 times or fewer.", "context": "XQL", "response": "dataset = xdr_data \/\/ Using the xdr dataset\n | filter event_type = ENUM.EVENT_LOG and action_evtlog_event_id in (7045, 4697) \/\/ Filtering by windows event log and id either 7045 or 4697\n | alter Service_Name = arrayindex(regextract(action_evtlog_message, \"Service Name.*?(\\w+)\\r\\n\"),0), Service_cmd = arrayindex(regextract(action_evtlog_message,\"Service File Name.*?(\\w.*)\\r\\n\"),0), Service_type = arrayindex(regextract(action_evtlog_message,\"Service Type.*?(\\w.*)\\r\\n\"),0), Service_start_type = arrayindex(regextract(action_evtlog_message,\"Service Start Type.*?(\\w.*)\\r\\n\"),0), Service_account = arrayindex(regextract(action_evtlog_message,\"Service Account.*?(\\w.*)\"),0) \/\/ Using regextract to get just a part of the full event log message into an array, then using arrayindex to take the first item in the array\n | filter Service_Name != \"MpKslDrv\" \/\/ Filtering our a service related to MS \n | fields Service_Name, Service_cmd, Service_type, Service_start_type, Service_account, event_id \/\/ Selecting all the relevant fields\n | comp count(event_id) as counter by Service_Name, Service_cmd, Service_type, Service_start_type, Service_account \/\/ Counting how many times each service was installed\n | filter counter <= 5 \/\/ Filtering by 5 or less occurrences\n | sort desc counter \/\/ Sorting in descending order "category": "open_qa"}
{"instruction": "Display executions of PSEXEC with a command line seen fewer than 10 times.", "context": "XQL", "response": "dataset = xdr_data \/\/ Using the xdr dataset\n| filter event_type = ENUM.PROCESS and event_sub_type = ENUM.PROCESS_START and lowercase(action_process_image_name) contains \"psexec\" \/\/ Filtering by process execution and acting process contains psexec. Note the lower case logic applied to the field\n| alter Process_Command_Line = replex(lowercase(action_process_image_command_line), \"\\s+\\\\\\\\.*?\\s+\", \" \\\\\\\\HOST \"), Process_Name = lowercase(replace(action_process_image_name, \"64\",\"\")) \/\/ Running an alter command to make sure the functions later ignore differences in hosts and in bit version, thus focusing on the command\n| alter Process_Command_Line = replace(Process_Command_Line, \"psexec64\",\"psexec\") \/\/ Running an alter command to make sure the functions later ignore differences in hosts and in bit version, thus focusing on the command\n| fields Process_Command_Line, Process_Name, event_id \/\/ Selecting the process command line, name and event id\n| comp count(event_id) as Counter by Process_Name, Process_Command_Line \/\/ Counting by how many times each process\/cmd pairs were seen \n| filter Counter <= 10 \/\/ Filtering for pairs seen less than 10 times\n| sort desc Counter \/\/ Sorting by occurrences in a descending order "category": "open_qa"}